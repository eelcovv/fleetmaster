"""
Example script to demonstrate the mesh fitting functionality.

This script uses the `find_best_matching_mesh` function to find the best
fit for a given transformation from a pre-existing HDF5 database.
"""

import logging
from pathlib import Path

from fleetmaster.core.fitting import find_best_matching_mesh

# Configure basic logging to see the output from the fitting function
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger(__name__)


def _run_and_print_test_case(
    case_number: int,
    description: str,
    hdf5_path: Path,
    target_translation: list[float],
    target_rotation: list[float],
    water_level: float,
    expected_match: str,
    note: str = "",
):
    """Runs a single fitting test case and prints the results."""
    print(f"\n\n--- Running Test Case {case_number}: {description} ---")
    logger.info(f"Searching for best match for translation={target_translation}, rotation={target_rotation}...\n")

    best_match, distance = find_best_matching_mesh(
        hdf5_path=hdf5_path,
        target_translation=target_translation,
        target_rotation=target_rotation,
        water_level=water_level,
    )

    print(f"\n--- Result for Test Case {case_number} ---")
    if best_match:
        print(f"✅ Best match found: '{best_match}'")
        print(f"   - Minimized Chamfer Distance: {distance:.6f}")
        print(f"   - Expected match: '{expected_match}'")
        if note:
            print(f"   - Note: {note}")
    else:
        print("❌ No match found.")


def run_fitting_example():
    """Runs the fitting example.

    It defines a target transformation and then searches the HDF5 database
    for the mesh that best matches that transformation.
    """
    # Path to the HDF5 database file generated by the settings_rotations.yml example.
    hdf5_path = Path(__file__).parent / "boxship.hdf5"
    if not hdf5_path.exists():
        logger.error(f"Database file not found at: {hdf5_path}")
        logger.error("Please run 'fleetmaster -v run --settings-file examples/settings_rotations.yml' first.")
        return

    # The water level used for the comparison. This should match the level at which
    # the meshes in the database were generated (wetted surface).
    water_level = 0.0
    draft = 2.0

    # --- Test Case 1: A transformation that should perfectly match an existing mesh ---
    _run_and_print_test_case(
        case_number=1,
        description="Exact Match",
        hdf5_path=hdf5_path,
        target_translation=[0.0, 0.0, -draft],
        target_rotation=[20.0, 20.0, 0.0],
        water_level=water_level,
        expected_match="boxship_t_1_r_20_20_00",
    )

    # --- Test Case 2: A transformation with irrelevant translations and rotations ---
    _run_and_print_test_case(
        case_number=2,
        description="Match with Noise",
        hdf5_path=hdf5_path,
        target_translation=[2.5, -4.2, -draft],  # Added dx, dy
        target_rotation=[20.0, 20.0, 15.0],  # Added yaw
        water_level=water_level,
        expected_match="boxship_t_1_r_20_20_00",
        note="The distance should be very close to the distance in Case 1.",
    )

    # --- Test Case 3: A transformation with different core properties ---
    _run_and_print_test_case(
        case_number=3,
        description="Different Match with Noise",
        hdf5_path=hdf5_path,
        target_translation=[2.5, -4.2, -draft * 1.2],  # Added dx, dy AND dz
        target_rotation=[23.0, 19.0, 15.0],  # Added yaw AND roll and pitch
        water_level=water_level,
        expected_match="boxship_t_2_r_00_00_00",
        note="The distance should be larger than both case 1 and case 2.",
    )


if __name__ == "__main__":
    run_fitting_example()
