"""
Example script to demonstrate the mesh fitting functionality.

This script uses the `find_best_matching_mesh` function to find the best
fit for a given transformation from a pre-existing HDF5 database.
"""

import logging
from pathlib import Path

from fleetmaster.core.fitting import find_best_matching_mesh

# Configure basic logging to see the output from the fitting function
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger(__name__)


def run_fitting_example():
    """Runs the fitting example.

    It defines a target transformation and then searches the HDF5 database
    for the mesh that best matches that transformation.
    """
    # Path to the HDF5 database file generated by the settings_rotations.yml example.
    hdf5_path = Path(__file__).parent / "boxship.hdf5"
    if not hdf5_path.exists():
        logger.error(f"Database file not found at: {hdf5_path}")
        logger.error("Please run 'fleetmaster -v run --settings-file examples/settings_rotations.yml' first.")
        return

    # The water level used for the comparison. This should match the level at which
    # the meshes in the database were generated (wetted surface).
    water_level = 0.0

    draft = 2.0

    # --- Test Case 1: A transformation that should perfectly match an existing mesh ---
    # We are looking for a mesh that corresponds to a Z-translation of -1.0,
    # a roll of 20 degrees, and a pitch of 20 degrees.
    # The database contains 'boxship_t_1_r_20_20_00.stl' with these exact parameters.
    print("\n--- Running Test Case 1: Exact Match ---")
    target_translation_1 = [0.0, 0.0, -draft]
    target_rotation_1 = [20.0, 20.0, 0.0]  # [roll, pitch, yaw]

    logger.info(f"Searching for best match for translation={target_translation_1}, rotation={target_rotation_1}...\n")

    best_match_1, distance_1 = find_best_matching_mesh(
        hdf5_path=hdf5_path,
        target_translation=target_translation_1,
        target_rotation=target_rotation_1,
        water_level=water_level,
    )

    print("\n--- Result for Test Case 1 ---")
    if best_match_1:
        print(f"✅ Best match found: '{best_match_1}'")
        print(f"   - Minimized Chamfer Distance: {distance_1:.6f}")
        print("   - Expected match: 'boxship_t_1_r_20_20_00'")
    else:
        print("❌ No match found.")

    # --- Test Case 2: A transformation with irrelevant translations and rotations ---
    # This case has the same core properties (Z-trans, X/Y-rot) as Case 1,
    # but with added X/Y translation and a Z rotation (yaw).
    # The optimization algorithm should ignore these and still find the same best match.
    print("\n\n--- Running Test Case 2: Match with Noise ---")
    target_translation_2 = [2.5, -4.2, -draft]  # Added dx, dy
    target_rotation_2 = [20.0, 20.0, 15.0]  # Added yaw

    logger.info(f"Searching for best match for translation={target_translation_2}, rotation={target_rotation_2}...\n")

    best_match_2, distance_2 = find_best_matching_mesh(
        hdf5_path=hdf5_path,
        target_translation=target_translation_2,
        target_rotation=target_rotation_2,
        water_level=water_level,
    )

    print("\n--- Result for Test Case 2 ---")
    if best_match_2:
        print(f"✅ Best match found: '{best_match_2}'")
        print(f"   - Minimized Chamfer Distance: {distance_2:.6f}")
        print("   - Expected match: 'boxship_t_1_r_20_20_00'")
        print("   - Note: The distance should be very close to the distance in Case 1.")
    else:
        print("❌ No match found.")

    # --- Test Case 3: A transformation with irrelevant translations and rotations ---
    # This case has the same core properties (Z-trans, X/Y-rot) as Case 1,
    # but with added X/Y translation and a Z rotation (yaw).
    # this time, difference valeus for the z-translation and x,y rotation are assumed.
    # the expected result should give a larger distance
    print("\n\n--- Running Test Case 3: Match with Noise ---")
    target_translation_3 = [2.5, -4.2, -draft * 1.2]  # Added dx, dy AND dz
    target_rotation_3 = [23.0, 19.0, 15.0]  # Added yaw  AND roll and pitch

    logger.info(f"Searching for best match for translation={target_translation_3}, rotation={target_rotation_3}...\n")

    best_match_3, distance_3 = find_best_matching_mesh(
        hdf5_path=hdf5_path,
        target_translation=target_translation_3,
        target_rotation=target_rotation_3,
        water_level=water_level,
    )

    print("\n--- Result for Test Case 3 ---")
    if best_match_2:
        print(f"✅ Best match found: '{best_match_3}'")
        print(f"   - Minimized Chamfer Distance: {distance_3:.6f}")
        print("   - Expected match: 'boxship_t_1_r_20_20_00'")
        print("   - Note: The distance should be larger than both case 1 and case 2.")
    else:
        print("❌ No match found.")


if __name__ == "__main__":
    run_fitting_example()
